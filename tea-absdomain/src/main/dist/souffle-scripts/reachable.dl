.type M <: unsigned
.type P <: unsigned
.type V <: unsigned
.type C <: unsigned
.type Z <: unsigned
.type H <: unsigned

.decl entryM(m:M)
.input entryM
.decl ci_IM(i:P, m:M)
.input ci_IM
.decl MPentry(m:M, p:P)
.input MPentry
.decl PPdirect(p:P, q:P)
.input PPdirect
.decl PPtrue(p:P, q:P, v:V)
.input PPtrue
.decl PPfalse(p:P, q:P, v:V)
.input PPfalse
.decl PPmatch(p:P, q:P, v:V, c:C)
.input PPmatch
.decl ci_pt(i:V, h:H)
.input ci_pt
.decl ci_hpt(h:H, o:H)
.input ci_hpt
.decl instruction_store_addr(p:P, addr:V)
.input instruction_store_addr
.decl mem_copy(p:P, dst:V, src:V)
.input mem_copy

//.decl ExtMeth(m:M)
//.input ExtMeth
.decl argInput(m:M, i:Z)
.input argInput
.decl IinvkArg(p:P, i:Z, v:V)
.input IinvkArg

.decl ci_reachableM(m:M)
.output ci_reachableM
.decl ci_reachableP(m:M, p:P)
.output ci_reachableP
.decl MmodH(m:M, h:H)
.output MmodH

ci_reachableM(m) :- entryM(m).
ci_reachableM(m) :- ci_reachableP(_, p), ci_IM(p, m).

ci_reachableP(m, p) :- ci_reachableM(m), MPentry(m, p).
ci_reachableP(m, q) :- ci_reachableP(m, p), PPdirect(p, q).
ci_reachableP(m, q) :- ci_reachableP(m, p), PPtrue(p, q, _).
ci_reachableP(m, q) :- ci_reachableP(m, p), PPfalse(p, q, _).
ci_reachableP(m, q) :- ci_reachableP(m, p), PPmatch(p, q, _, _).

MmodH(m, h) :- ci_reachableP(m, p), instruction_store_addr(p, v), ci_pt(v, h).
MmodH(m, h) :- MmodH(callee, h), ci_IM(p, callee), ci_reachableP(m, p).

// mark impure external functions, like scanf
.decl extMod(m:M, h:H)
extMod(m, h) :- ci_reachableP(m, p), ci_IM(p, ext), argInput(ext, i), IinvkArg(p, i, v), ci_pt(v, h).
extMod(m, o) :- extMod(m, h), ci_hpt(h, o).
MmodH(m, h) :- extMod(m, h).
MmodH(m, h) :- ci_reachableP(m, p), mem_copy(p, dst, _), ci_pt(dst, h).

// Note: this is a temporal trick, treat all heaps in external methods as untouched
//touchMV(m, v) :- ci_reachable(m), ExtMeth(m), variable_global(v).
//touchMV(m, v) :- ci_reachable(m), ExtMeth(m), MmethArg(m, _, v).
//touchMH(m, v) :- touchMV(m, v), ci_pt(v, h).
//touchMH(m, o) :- touchMH(m, h), ci_hpt(h, o).
//MmodH(m, h) :- touch_MH(m, h).