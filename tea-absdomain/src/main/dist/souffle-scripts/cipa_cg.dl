.type M <: unsigned // methods
.type V <: unsigned // temporary variables $1, $2, $3, ...
.type H <: unsigned // lvalues (declared variables, function names, mallocs)
.type P <: unsigned // program points, especially invocation sites
.type Z <: unsigned // integers for counting function arguments
.type T <: unsigned // used in cast operators

// declared variables
.decl AllocObj(y:V,h:H)
.input AllocObj
.decl GlobalAllocObj(y:V,h:H)
.input GlobalAllocObj
.decl variable_global_init(gvar:V, init:V)
.input variable_global_init

// rhs $y[*x] // y = load ptr, ptr x
.decl LoadPtr(y:V,x:V)
.input LoadPtr
// lhs *y = $x // store ptr y, ptr x
.decl StorePtr(y:V,x:V)
.input StorePtr

// statements
.decl MV(m:M,v:V)
.input MV
.decl MP(m:M,i:P)
.input MP
// function names are a pointer to itself
.decl ObjFunc(h:H,f:M)
.input ObjFunc

// special objects
.decl ObjNull(h:H)
.input ObjNull
.decl ObjUnknown(h:H)
.input ObjUnknown

// Call Graph
.decl StaticCall(i:P,m:M)
.input StaticCall
.decl IndirectCall(i:P,f:V)
.input IndirectCall
.decl IinvkArg(i:P,n:Z,x:V)
.input IinvkArg
.decl IinvkRet(i:P,y:V)
.input IinvkRet
.decl MmethArg(m:M,n:Z,x:V)
.input MmethArg
.decl MmethRet(m:M,y:V)
.input MmethRet

// operations
.decl variable_const_ptr_null(v:V)
.input variable_const_ptr_null
.decl variable_const_aggzero(v:V)
.input variable_const_aggzero
.decl operation_cast_inttoptr(res:V, from:V, fromty:T, toty:T)
.input operation_cast_inttoptr
.decl operation_cast_bitcast(res:V, from:V, fromty:T, toty:T)
.input operation_cast_bitcast
.decl pointer_type(ty:T)
.input pointer_type
.decl operation_gep_base(res:V, base:V)
.input operation_gep_base

// special external functions
.decl memcpyFunc(m:M)
.input memcpyFunc
.decl memmoveFunc(m:M)
.input memmoveFunc
.decl memsetFunc(m:M)
.input memsetFunc
.decl memchrFunc(m:M)
.input memchrFunc
.decl Z0(z:Z)
.input Z0
.decl Z1(z:Z)
.input Z1

.decl ci_IM(i:P,m:M)
.output ci_IM
.decl ci_pt(v:V,h:H)
.output ci_pt
// stored pointers
.decl ci_hpt(h:H,o:H)
.output ci_hpt

/*************
 *   Rules   *
 *************/

// call graph and inter-procedural assignment
ci_IM(i,m) :- IndirectCall(i,fptr), ci_pt(fptr,h), ObjFunc(h,m).
ci_IM(i,m) :- StaticCall(i,m).

ci_pt(u,o) :- ci_IM(i,m), IinvkArg(i,z,v), MmethArg(m,z,u), ci_pt(v,o).
ci_pt(v,o) :- ci_IM(i,m), IinvkRet(i,v), MmethRet(m,u), ci_pt(u,o).

// local variables
ci_pt(v,h) :- AllocObj(v,h).
ci_hpt(h,o) :- StorePtr(u,v), ci_pt(u,h), ci_pt(v,o).
ci_pt(u,o) :- LoadPtr(u,v), ci_pt(v,h), ci_hpt(h,o).
// handling global variables
ci_pt(v,h) :- GlobalAllocObj(v,h).
ci_hpt(h,o) :- variable_global_init(gvar, init), ci_pt(gvar, h), ci_pt(init, o).
// handling special constants
ci_pt(v,h) :- variable_const_ptr_null(v), ObjNull(h).
ci_pt(v,h) :- variable_const_aggzero(v), ObjNull(h).

// special operations that generates pointers
ci_pt(v,h) :- operation_cast_inttoptr(v, _, _, _), ObjUnknown(h).
ci_pt(v,h) :- operation_cast_bitcast(v, _, _, ty), pointer_type(ty), ObjUnknown(h).
// for gep operations, it still goes to the same abstract obj
ci_pt(v,h) :- operation_gep_base(v,base), ci_pt(base,h).

// memcpy and memmove
.decl mem_copy(p:P, dst:V, src:V)
.output mem_copy
mem_copy(p, dst, src) :- ci_IM(p, m), memcpyFunc(m), Z0(i0), Z1(i1), IinvkArg(p, i0, dst), IinvkArg(p, i1, src).
mem_copy(p, dst, src) :- ci_IM(p, m), memmoveFunc(m), Z0(i0), Z1(i1), IinvkArg(p, i0, dst), IinvkArg(p, i1, src).
ci_hpt(dstobj, o) :- mem_copy(_, dst, src), ci_pt(dst, dstobj), ci_pt(src, srcobj), ci_hpt(srcobj, o).
.decl mem_ret(p:P, ret:V, dst:V)
.output mem_ret
mem_ret(p, ret, dst) :- ci_IM(p, m), memcpyFunc(m), Z0(i0), IinvkArg(p, i0, dst), IinvkRet(p, ret).
mem_ret(p, ret, dst) :- ci_IM(p, m), memmoveFunc(m), Z0(i0), IinvkArg(p, i0, dst), IinvkRet(p, ret).
mem_ret(p, ret, dst) :- ci_IM(p, m), memsetFunc(m), Z0(i0), IinvkArg(p, i0, dst), IinvkRet(p, ret).
mem_ret(p, ret, dst) :- ci_IM(p, m), memchrFunc(m), Z0(i0), IinvkArg(p, i0, dst), IinvkRet(p, ret).
ci_pt(ret, o) :- mem_ret(_, ret, dst), ci_pt(dst, o).

.decl Alias(u:V, v:V)
.output Alias
// Only care about normal aliases
Alias(u, v) :- ci_pt(u, h), ci_pt(v, h), AllocObj(_, h).
Alias(u, v) :- ci_pt(u, h), ci_pt(v, h), GlobalAllocObj(_, h).