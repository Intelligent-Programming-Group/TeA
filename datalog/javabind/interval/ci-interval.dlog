# Author: Yifan Chen
# name=java-ci-interval-dlog

# program
#.include "M.dom"
.include "P.dom"
.include "ITV.dom"
.include "OP.dom"
.include "IU.dom"
.include "ITVP.dom"

# BDD variable order
.bddvarorder P0xP1_IU0xIU1xIU2_ITVP0_OP0_ITV0xITV1xITV2

# INPUT relations
# inputs & definitions
DefineLoc(v:IU0,p:P0,a:ITV0) input
InputLoc(v:IU0,p:P0,a:ITV0) input

# assignments
AssignPrimLoc(p:P0,v:IU0,u:IU1) input
BinopLoc(p:P0,v:IU0,op:OP0,u1:IU1,u2:IU2) input
BinopLoc1(p:P0,v:IU0,op:OP0,b1:ITV0,u2:IU1) input
BinopLoc2(p:P0,v:IU0,op:OP0,u1:IU1,b2:ITV0) input

# control-flow
PPdirect(p:P0,q:P1) input
PPcond(p:P0,q:P1,cond:ITVP0,v:IU0) input
PPmay(p:P0,q:P1) input

# arithmetics
Compute(op:OP0,b1:ITV0,b2:ITV1,a:ITV2) input
MaySat(cond:ITVP0,a:ITV0) input

# auxiliary relations
untouch(p:P0,v:IU0)
touch(p:P0,v:IU0)

# result
varLocRange(v:IU0,p:P0,a:ITV0) output

# RULES ==============
# Note: varLocRange refers to the post-interval of stmt p, i.e. pre-interval of next stmt q.
# definitions
#varLocRange(v,p,a) :- MPentry(m,p), ParamRange(v,a).
varLocRange(v,q,a) :- DefineLoc(v,p,a), PPdirect(p,q).
varLocRange(v,q,a) :- InputLoc(v,p,a), PPdirect(p,q).

# assignments: v := u
varLocRange(v,q,a) :- AssignPrimLoc(p,v,u), PPdirect(p,q), varLocRange(u,p,a).

# binop: v := u1 op u2
varLocRange(v,q,a) :- BinopLoc(p,v,op,u1,u2), PPdirect(p,q), varLocRange(u1,p,b1), varLocRange(u2,p,b2), Compute(op,b1,b2,a).
varLocRange(v,q,a) :- BinopLoc1(p,v,op,b1,u2), PPdirect(p,q), varLocRange(u2,p,b2), Compute(op,b1,b2,a).
varLocRange(v,q,a) :- BinopLoc2(p,v,op,u1,b2), PPdirect(p,q), varLocRange(u1,p,b1), Compute(op,b1,b2,a).

# branch: if cond(v) goto
varLocRange(v,q,a) :- PPcond(p,q,cond,v), varLocRange(v,p,a), MaySat(cond,a).
varLocRange(v,q,a) :- PPmay(p,q), varLocRange(v,p,a).

# otherwise, skip
touch(p,v) :- DefineLoc(v,p,_).
touch(p,v) :- InputLoc(v,p,_).
touch(p,v) :- AssignPrimLoc(p,v,_).
touch(p,v) :- BinopLoc(p,v,_,_,_).
touch(p,v) :- BinopLoc1(p,v,_,_,_).
touch(p,v) :- BinopLoc2(p,v,_,_,_).
untouch(p,v) :- PPdirect(p,_), !touch(p,v).
untouch(p,v) :- PPcond(p,_,_,_), !PPcond(p,_,_,v).
varLocRange(v,q,a) :- untouch(p,v), PPdirect(p,q), varLocRange(v,p,a).
varLocRange(v,q,a) :- untouch(p,v), PPcond(p,q,_,_), varLocRange(v,p,a).
