# Author: Yifan Chen
# name=java-taint-dlog

# program
.include "L.dom"
.include "M.dom"
.include "C.dom"
.include "U.dom"
.include "V.dom"
.include "F.dom"
.include "I.dom"
.include "Z.dom"

# BDD variable order
.bddvarorder L0xL1_M0_C0xC1_U0xU1_V0_F0_I0_Z0

# INPUT Relations ================
# Sources and Sinks
SrcMeth(l:L,m:M) input
SnkMeth(l:L,m:M) input

# program structures
MV(m:M,v:V) input
MU(m:M,u:U) input
MI(m:M,i:I) input

# Primitive types
AssignPrim(u0:U0,u1:U1) input
LoadPrim(u:U,v:V,f:F) input
StorePrim(v:V,f:F,u:U) input
LoadStatPrim(u:U,f:F) input
StoreStatPrim(f:F,u:U) input
MmethPrimArg(m:M,z:Z,u:U) input
MmethPrimRet(m:M,z:Z,u:U) input
IinvkPrimArg(i:I,z:Z,u:U) input
IinvkPrimRet(i:I,z:Z,u:U) input

# Ref types
IinvkArg(i:I,z:Z,v:V) input
IinvkRet(i:I,z:Z,v:V) input

# points-to and call graphs
reachableCM(c:C,m:M) input
CICM(c:C,i:I,c:C,m:M) input
pt(c:C,v:V,o:C) input
fpt(o1:C,f:F,o2:C) input

# OUTPUT Relations ===============
flow(src:L,sink:L) output

# INTERMEDIATE Relaitons =========
snkPrim(c:C,u:U,l:L)
snkRef(c:C,v:V,l:L)
snkObj(o:C,l:L)
srcPrim(c:C,u:U,l:L)
srcRef(c:C,v:V,l:L)
srcObj(o:C,l:L)

labelPrim(c:C,u:U,l:L)
labelPrimFld(o:C,f:F,l:L)
labelPrimStatFld(f:F,l:L)

# RULES ==========================
# mark all sink/source sites
#  label -> var -> primitives / (indirect) objects
snkInvk(c,i,l) :- reachableCM(c,m), MI(m,i), CICM(c,i,_,mm), SnkMeth(l,mm).
snkPrim(c,u,l) :- snkInvk(c,i,l), IinvkPrimArg(i,_,u).
snkRef(c,v,l) :- snkInvk(c,i,l), IinvkArg(i,_,v).
snkObj(o,l) :- snkRef(c,v,l), pt(c,v,o).
snkObj(o2,l) :- snkObj(o1,l), fpt(o1,_,o2).

srcInvk(c,i,l) :- reachableCM(c,m), MI(m,i), CICM(c,i,_,mm), SrcMeth(l,mm).
srcPrim(c,u,l) :- srcInvk(c,i,l), IinvkPrimRet(i,_,u).
srcRef(c,v,l) :- srcInvk(c,i,l), IinvkRet(i,_,v).
srcObj(o,l) :- srcRef(c,v,l), pt(c,v,o).
srcObj(o2,l) :- srcObj(o1,l), fpt(o1,_,o2).

# propagate labeled flow from src sites
#  (indirect) objects / primitives and in between
## starting points from sources
labelPrim(c,u,l) :- srcPrim(c,u,l).

## Intra-procedural propagate labeled primitives

### Assign u = v
labelPrim(c,u,l) :- AssignPrim(u,v), labelPrim(c,v,l).

### Store v.f = u
labelPrimFld(o,f,l) :- StorePrim(v,f,u), labelPrim(c,u,l), pt(c,v,o).
### Load u = v.f
labelPrim(c,u,l) :- LoadPrim(u,v,f), pt(c,v,o), labelPrimFld(o,f,l).
labelPrim(c,u,l) :- LoadPrim(u,v,_), pt(c,v,o), srcObj(o,l).
### Store f = u
labelPrimStatFld(f,l) :- labelPrim(_,u,l), StoreStatPrim(f,u).
### Load u = f
labelPrim(c,u,l) :- LoadStatPrim(u,f), labelPrimStatFld(f,l), MU(m,u), reachableCM(c,m).

## Inter-Procedural
### actual param -> formal param
labelPrim(c2,u2,l) :- CICM(c1,i,c2,m), IinvkPrimArg(i,z,u1), MmethPrimArg(m,z,u2), labelPrim(c1,u1,l).
### formal ret -> actual ret
labelPrim(c1,u1,l) :- CICM(c1,i,c2,m), IinvkPrimRet(i,z,u1), MmethPrimRet(m,z,u2), labelPrim(c2,u2,l).

# endpoints in sinks
flow(src,snk) :- snkObj(o,snk), srcObj(o,src).
flow(src,snk) :- snkObj(o,snk), labelPrimFld(o,_,src).
flow(src,snk) :- snkPrim(c,u,snk), labelPrim(c,u,src).