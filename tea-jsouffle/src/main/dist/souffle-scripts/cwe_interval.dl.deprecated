.type M <: unsigned
.type V <: unsigned
.type H <: unsigned
.type F <: unsigned
.type I <: unsigned
.type Z <: unsigned
.type P <: unsigned
.type C <: unsigned
.type U <: unsigned
.type T <: unsigned

.decl ci_pt(v:V, h:H)
.input ci_pt
.decl ci_hpt(h:H, o:H)
.input ci_hpt
//.decl ci_fpt(h:H, f:F, o:H)
//.input ci_fpt

.decl ci_IM(p:P, m:M)
.input ci_IM

//.decl primV(v:V)
//.input primV
//.decl primH(h:H)
//.input primH

.decl integer_type(t:T)
.input integer_type
.decl variable_type(v:V, t:T)
.input variable_type

.decl inputV(p:P, v:V)
.decl inputH(p:P, h:H)

.decl ci_reachableM(m:M)
.input ci_reachableM
.decl ci_reachableP(m:M, p:P)
.input ci_reachableP

.decl MPentry(m:M,p:P)
.input MPentry
.decl MPexit(m:M,p:P)
.input MPexit
.decl PPdirect(p:P,q:P)
.input PPdirect
.decl PPtrue(p:P,q:P,v:V)
.input PPtrue
.decl PPfalse(p:P,q:P,v:V)
.input PPfalse
.decl PPmatch(p:P,q:P,v:V,c:C)
.input PPmatch

.decl instruction_store_addr(p:P, addr:V)
.input instruction_store_addr
.decl instruction_store_var(p:P, v:V)
.input instruction_store_var
.decl instruction_load_res(p:P, res:V)
.input instruction_load_res
.decl instruction_load_ptr(p:P, ptr:V)
.input instruction_load_ptr

.decl P_strong_update(p:P, h:H)
.input P_strong_update
.decl P_weak_update(p:P, h:H)
.input P_weak_update
.decl P_no_update(p:P, h:H)
.input P_no_update

// actually useless, in c, gep always returns a pointer
//.decl LoadFld(y:V, x:V, f:F)
//.input LoadFld
//.decl StoreFld(y:V, f:F, x:V)
//.input StoreFld

//.decl LoadArr(y:V, x:V, i:V)
//.input LoadArr
//.decl StoreArr(y:V, i:V, x:V)
//.input StoreArr

.decl IinvkArg(i:P, n:Z, x:V)
.input IinvkArg
.decl IinvkRet(i:P, y:V)
.input IinvkRet
.decl MmethArg(m:M, n:Z, x:V)
.input MmethArg
.decl MmethRet(m:M, y:V)
.input MmethRet

.decl Pstore(p:P, v:V)
.input Pstore
.decl Pload(p:P, v:V)
.input Pload

.decl Palloca(p:P, v:V)
.input Palloca
.decl Pnoop(p:P)
.input Pnoop
.decl Pinvk(p:P)
.input Pinvk
.decl Peval(p:P, v:V)
.input Peval
.decl variable_const_int(e:V, c:C)
.input variable_const_int
.decl operation_unary_fneg(e:V, v:V)
.input operation_unary_fneg
.decl  operation_binary_add(e:V,  v1:V, v2:V)
.input operation_binary_add
.decl  operation_binary_fadd(e:V, v1:V, v2:V)
.input operation_binary_fadd
.decl  operation_binary_sub(r:V, v1:V, v2:V)
.input operation_binary_sub
.decl  operation_binary_fsub(r:V, v1:V, v2:V)
.input operation_binary_fsub
.decl  operation_binary_mul(r:V, v1:V, v2:V)
.input operation_binary_mul
.decl  operation_binary_fmul(r:V, v1:V, v2:V)
.input operation_binary_fmul
.decl  operation_binary_udiv(r:V, v1:V, v2:V)
.input operation_binary_udiv
.decl  operation_binary_sdiv(r:V, v1:V, v2:V)
.input operation_binary_sdiv
.decl  operation_binary_fdiv(r:V, v1:V, v2:V)
.input operation_binary_fdiv
.decl  operation_binary_urem(r:V, v1:V, v2:V)
.input operation_binary_urem
.decl  operation_binary_srem(r:V, v1:V, v2:V)
.input operation_binary_srem
.decl  operation_binary_frem(r:V, v1:V, v2:V)
.input operation_binary_frem
.decl  operation_binary_shl(r:V, v1:V, v2:V)
.input operation_binary_shl
.decl  operation_binary_lshr(r:V, v1:V, v2:V)
.input operation_binary_lshr
.decl  operation_binary_ashr(r:V, v1:V, v2:V)
.input operation_binary_ashr
.decl  operation_binary_and(r:V, v1:V, v2:V)
.input operation_binary_and
.decl  operation_binary_or(r:V, v1:V, v2:V)
.input operation_binary_or
.decl  operation_binary_xor(r:V, v1:V, v2:V)
.input operation_binary_xor
.decl  operation_cast_trunc( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_trunc
.decl  operation_cast_zext( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_zext
.decl  operation_cast_sext( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_sext
.decl  operation_cast_fptoui( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_fptoui
.decl  operation_cast_fptosi( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_fptosi
.decl  operation_cast_uitofp( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_uitofp
.decl  operation_cast_sitofp( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_sitofp
.decl  operation_cast_fptrunc( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_fptrunc
.decl  operation_cast_fpext( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_fpext
.decl  operation_cast_ptrtoint( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_ptrtoint
.decl  operation_cast_inttoptr( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_inttoptr
.decl  operation_cast_bitcast( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_bitcast
.decl  operation_cast_addrspacecast( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_addrspacecast

.decl ConstU(e:C, c:U)
.input ConstU
.decl evalAddU(o1:U,o2:U,res:U)
.input evalAddU
.decl evalSubU(o1:U,o2:U,res:U)
.input evalSubU
.decl evalMulU(o1:U,o2:U,res:U)
.input evalMulU
.decl evalAndU(o1:U,o2:U,res:U)
.input evalAndU
.decl evalOrU(o1:U,o2:U,res:U)
.input evalOrU
.decl evalXorU(o1:U,o2:U,res:U)
.input evalXorU
.decl evalEQU(o1:U, o2:U)
.input evalEQU
.decl evalNEU(o1:U, o2:U)
.input evalNEU
.decl evalLTU(o1:U, o2:U)
.input evalLTU
.decl evalLEU(o1:U, o2:U)
.input evalLEU
.decl Uempty(c:U)
.input Uempty
.decl Uzero(c:U)
.input Uzero
.decl Uone(c:U)
.input Uone
.decl Unonzero(c:U)
.input Unonzero
.decl Uunknown(c:U)
.input Uunknown

.decl ObjFixShape(content:H,c:C,t:T)
.input ObjFixShape
.decl ObjVarShape(content:H,v:V,t:T)
.input ObjVarShape

.decl PredUnknown(v:V)
.input PredUnknown

.decl ci_postPHval(p:P, h:H, c:U)
.decl ci_PHval(p:P, h:H, c:U)
//.output ci_PHval
.decl ci_gHval(h:H, c:U)
//.output ci_gHval
.decl ci_Vval(v:V, c:U)
//.output ci_Vval
//.decl ci_Fval(h:H, f:F, c:U)
//.output ci_Fval

//.decl ci_postPHoffset(p:P, h:H, content:H, type:T, offset:U)
//.decl ci_PHoffset(p:P, h:H, content:H, type:T, offset:U)
//.output ci_PHoffset
//.decl ci_gHoffset(h:H, content:H, type:T, offset:U)
//.output ci_gHoffset
//.decl ci_Voffset(v:V,content:H,type:T,offset:U)
//.output ci_Voffset

.decl ExtMeth(m:M)
.input ExtMeth
// change this marker to meth-related
.decl argInput(m:M, z:Z)
.input argInput
.decl retInput(m:M)
.input retInput
.decl Uinput(c:U)
.input Uinput

.decl AllocObj(v:V,h:H)
.input AllocObj

.decl MP(m:M, p:P)
.input MP

.decl MmodH(m:M, h:H)
.input MmodH
.decl MunmodH(m:M, h:H)
.input MunmodH
.decl MV(m:M, v:V)
.input MV

.decl mem_copy(p:P, dst:V, src:V)
.input mem_copy

ci_Vval(v,u) :- variable_const_int(v, c), ConstU(c, u).
ci_Vval(v,u) :- operation_unary_fneg(v, v0), ci_Vval(v0, u0), Uzero(uzero), evalSubU(uzero, u0, u).
ci_Vval(v,u) :- operation_binary_add(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, u2), evalAddU(u1, u2, u).
ci_Vval(v,u) :- operation_binary_sub(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, u2), evalSubU(u1, u2, u).
ci_Vval(v,u) :- operation_binary_mul(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, u2), evalMulU(u1, u2, u).
ci_Vval(v,u) :- operation_binary_udiv(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, _), Uunknown(u).
ci_Vval(v,u) :- operation_binary_sdiv(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, _), Uunknown(u).
ci_Vval(v,u) :- operation_binary_urem(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, u2), Uzero(uzero), evalLEU(uzero, u), evalLTU(u, u2).
ci_Vval(v,u) :- operation_binary_srem(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, u2), Uzero(uzero), evalLEU(uzero, u), evalLTU(u, u2).
ci_Vval(v,u) :- operation_binary_shl(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, _), evalLEU(u1, u).
ci_Vval(v,u) :- operation_binary_lshr(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, _), Uzero(uzero), evalLEU(uzero, u), evalLTU(u, u1).
ci_Vval(v,u) :- operation_binary_ashr(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, _), Uzero(uzero), evalLEU(uzero, u), evalLTU(u, u1).
ci_Vval(v,u) :- operation_binary_and(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, _), Uunknown(u).
ci_Vval(v,u) :- operation_binary_or(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, _), Uunknown(u).
ci_Vval(v,u) :- operation_binary_xor(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, _), Uunknown(u).


ci_Vval(v,u) :- operation_cast_trunc(v, v0, _, _), ci_Vval(v0, u).
ci_Vval(v,u) :- operation_cast_zext(v, v0, _, _), ci_Vval(v0, u).
ci_Vval(v,u) :- operation_cast_sext(v, v0, _, _), ci_Vval(v0, u).
ci_Vval(v,u) :- operation_cast_fptoui(v, _, _, _), Uunknown(u).
ci_Vval(v,u) :- operation_cast_fptosi(v, _, _, _), Uunknown(u).
ci_Vval(v,u) :- operation_cast_ptrtoint(v, _, _, _), Uunknown(u).
ci_Vval(v,u) :- operation_cast_bitcast(v, _, _, _), Uunknown(u).

ci_Vval(u,c) :- ci_reachableP(_, p), instruction_load_res(p, u), variable_type(u, t), integer_type(t), instruction_load_ptr(p, v), variable_type(u, t), integer_type(t), ci_pt(v,h), ci_PHval(p,h,c).
ci_Vval(u,c) :- ci_reachableP(m, p), instruction_load_res(p, u), variable_type(u, t), integer_type(t), instruction_load_ptr(p, v), ci_pt(v,h), ci_gHval(h,c), MunmodH(m,h).

ci_PHval(q,h,c) :- ci_postPHval(p,h,c), PPdirect(p, q).
ci_PHval(q,h,c) :- ci_postPHval(p,h,c), PPtrue(p, q, _).
ci_PHval(q,h,c) :- ci_postPHval(p,h,c), PPfalse(p, q, _).
ci_PHval(q,h,c) :- ci_postPHval(p,h,c), PPmatch(p, q, _, _).

ci_postPHval(p,h,c) :- ci_reachableP(_, p), instruction_store_var(p,v), instruction_store_addr(p,u), ci_pt(u,h), ci_Vval(v,c), P_strong_update(p,h).
ci_postPHval(p,h,c) :- ci_reachableP(_, p), instruction_store_var(p,v), instruction_store_addr(p,u), ci_pt(u,h), ci_Vval(v,c), P_weak_update(p,h).
ci_postPHval(p,h,c) :- ci_reachableP(_, p), Pstore(p, _), ci_PHval(p,h,c), P_weak_update(p,h).
ci_postPHval(p,h,c) :- ci_reachableP(_, p), Pstore(p,_), ci_PHval(p,h,c), P_no_update(p,h).
ci_postPHval(p,h,c) :- Peval(p,_), ci_PHval(p,h,c).
ci_postPHval(p,h,c) :- Pload(p,_), ci_PHval(p,h,c).
ci_postPHval(p,h,c) :- Palloca(p,_), ci_PHval(p,h,c).
ci_postPHval(p,h,c) :- Pnoop(p), ci_PHval(p,h,c).

ci_Vval(u,c) :- ci_IM(i,m), IinvkArg(i,z,v), MmethArg(m,z,u), ci_Vval(v,c).
ci_Vval(v,c) :- ci_IM(i,m), IinvkRet(i,v), MmethRet(m,u), ci_Vval(u,c).
//// suppose all memobj are un-initialized
//ci_PHval(p,h,c) :- ci_reachableM(m), MPentry(m,p), MmodH(m,h), primH(h), Uempty(c).
// implicit arguments/returns are passed by pointers
ci_gHval(h,c) :- ci_PHval(p,h,c), Pinvk(p).
ci_postPHval(p,h,c) :- ci_PHval(p,h,c), ci_IM(p, m), MunmodH(m,h).
ci_PHval(q,h,c) :- ci_PHval(p,h,c), ci_IM(p,m), MmodH(m,h), MPentry(m,q).
ci_postPHval(p,h,c) :- ci_PHval(q,h,c), MPexit(m,q), ci_IM(p,m).
// treat all external methods as pure, i.e. no heaps are touched
ci_postPHval(p,h,c) :- ci_PHval(p,h,c), ci_IM(p,m), ExtMeth(m).
// special handling of some external functions
ci_postPHval(p, dstobj, c) :- mem_copy(p, dst, src), ci_pt(dst, dstobj), ci_pt(src, srcobj), ci_PHval(p, srcobj, c).

inputV(p,u) :- ci_reachableP(_, p), ci_IM(p,m), IinvkArg(p,z,u), argInput(m,z).
inputV(p,v) :- ci_reachableP(_, p), ci_IM(p,m), IinvkRet(p,v), retInput(m).
inputH(p,h) :- inputV(p,v), ci_pt(v,h).
inputH(p,o) :- inputH(p,h), ci_hpt(h,o).

ci_Vval(v,c) :- inputV(_,v), Uinput(c).
ci_postPHval(p,h,c) :- inputH(p,h), Uinput(c).

.decl CWE369_divide_by_zero(p:P, v:V)
.output CWE369_divide_by_zero

CWE369_divide_by_zero(p, d) :- ci_reachableP(_, p), Peval(p, res), operation_binary_udiv(res, _, d), ci_Vval(d, u), Uzero(uzero), evalEQU(u, uzero).
CWE369_divide_by_zero(p, d) :- ci_reachableP(_, p), Peval(p, res), operation_binary_sdiv(res, _, d), ci_Vval(d, u), Uzero(uzero), evalEQU(u, uzero).
CWE369_divide_by_zero(p, d) :- ci_reachableP(_, p), Peval(p, res), operation_binary_urem(res, _, d), ci_Vval(d, u), Uzero(uzero), evalEQU(u, uzero).
CWE369_divide_by_zero(p, d) :- ci_reachableP(_, p), Peval(p, res), operation_binary_srem(res, _, d), ci_Vval(d, u), Uzero(uzero), evalEQU(u, uzero).

.decl primitive_type(t:T)
non_array_type(t) :- pointer_type(t).
non_array_type(t) :- integer_type(t).
non_array_type(t) :- floatingpoint_type(t).
.decl TypeShape(arr:T, size:U, content:T)
TypeShape(ty, num, ty) :- primitive_type(ty), Uone(num).
TypeShape(ty, num, ty) :- struct_type(ty), Uone(num).
TypeShape(arr, num, content) :- array_type_component(arr, comp), TypeShape(comp, width, content), array_type_size(arr, size), ConstU(size, len). evalMulU(len, width, num).
.decl ObjShape(obj:H, size:U, content:T)
ObjShape(obj, num, comp) :- ObjFixShape(obj, size, t), TypeShape(t, width, comp), ConstU(size, len), evalMulU(len, width, num).
ObjShape(obj, num, comp) :- ObjVarShape(obj, v, t), TypeShape(t, width, comp), ci_Vval(v, len), evalMulU(len, width, num).
.decl ObjSize(obj:H, bytes:H)
ObjSize(obj, bytes) :- ObjShape(obj, num, comp), baseAP(obj, a), APmixed(a), type_size(comp, w), evalMulU(num, w, bytes).
ObjSize(obj, bytes) :- AllocObj(v, obj), IinvkRet(p, v), ci_IM(p, m), mallocFunc(m), Z0(i0), IinvkArg(p, i0, size), ci_Vval(size, bytes).
ObjSize(obj, bytes) :- AllocObj(v, obj), IinvkRet(p, v), ci_IM(p, m), allocaFunc(m), Z0(i0), IinvkArg(p, i0, size), ci_Vval(size, bytes).
ObjSize(obj, bytes) :- AllocObj(v, obj), IinvkRet(p, v), ci_IM(p, m), reallocFunc(m), Z1(i1), IinvkArg(p, i1, size), ci_Vval(size, bytes).
ObjSize(obj, bytes) :- AllocObj(v, obj), IinvkRet(p, v), ci_IM(p, m), callocFunc(m), Z0(i0), Z1(i1), IinvkArg(p, i0, numv), IinvkArg(p, i1, widthv), ci_Vval(numv, num), ci_Vval(widthv, width), evalMulU(num, width, bytes).


ci_Voffset(v,t,u0,lim) :- AllocObj(v,obj), ObjShape(obj,lim,t), Uzero(u0).
ci_gep_offset(v,i1,t,u1,lim,ty) :- ci_Voffset(base,t,u0,lim), operation_gep_base(v, base), operation_gep_type(v, ty), TypeShape(ty, w, t), Z0(i0), operation_gep_index_offset(v,i0,offv), ci_Vval(offv,off), evalMulU(off,w,du), evalAddU(u0,du,u1),Z1(i1).
ci_gep_offset(v,i1,t,u1,lim,sub) :- ci_gep_offset(v,i0,t,u0,lim,ty), operation_gep_index_offset(v,i0,offv), array_type_component(ty,sub), ArrayShape(sub,num,t), ci_Vval(offv, off), evalMulU(off,num,du),evalAddU(u0,du,u1), Znext(i0,i1).
ci_gep_offset(v,i1,subcomp,u,lim,sub) :- ci_gep_offset(v,i0,_,_,_,ty), operation_gep_index_field(v,i0,f), struct_type_field(ty,f,sub),TypeShape(sub,lim,subcomp), Uzero(u),Znext(i0,i1).
ci_Voffset(v,t,u,lim) :- ci_gep_offset(v,n,t,u,lim,_), operation_gep_nindices(v,n).

// TODO: change this to modref?
ci_Voffset(u,t,off,lim) :- ci_Voffset(v,t,off,lim), instruction_store_var(p, v), instruction_store_addr(p, from), alias(to, from), instruction_load_ptr(q, to), instruction_load_res(q,u).
//// computing array content offsets
//// 1: dereferencing an array object gets its first element
//ci_Voffset(p,content,t,c) :- LoadPtr(p,base), ci_pt(base,arr), HeapArrayContent(arr,content), VarArrayShape(content,t,_), Uzero(c).
//// 2: malloc-ed ptr points to its first element
//ci_Voffset(p,content,t,c) :- MallocMem(p,content), VarArrayShape(content,t,_), Uzero(c).
//// 3: casting pointers
//ci_Voffset(p,content,t,c) :- Eptrcast(p,t,q), ci_Voffset(q,content,_,c), Uzero(c).
//// casting middle elements goes to unknown
//ci_Voffset(p,content,t,u) :- Eptrcast(p,t,q), ci_Voffset(q,content,_,c), Unonzero(c), Uunknown(u).
//// casting from primitive vals goes to unknown
//ci_Voffset(p,content,t,u) :- Eptrcast(p,t,q), ci_Vval(q,_), ci_pt(p,content), Uunknown(u).
//// 4: gep propagates offsets
//ci_Voffset(p,content,t,c) :- LoadArr(p,q,i), ci_Vval(i,c1), ci_Voffset(q,content,t,c2), evalPlusU(c1,c2,c).
//// 4.1: computations as well
//ci_Voffset(v,content,t,u) :- ci_reachableM(m), MV(m, v), Eunary(v, o, v0), ci_Voffset(v0, content, t, u0), evalUnaryU(o, u0, u), PtrOP(o).
//ci_Voffset(v,content,t,u) :- ci_reachableM(m), MV(m, v), Ebinop(v, o, v1, v2), ci_Voffset(v1, content, t, u1), ci_Vval(v2, u2), evalBinopU(o, u1, u2, u), PtrOP(o).
//ci_Voffset(v,content,t,u) :- ci_reachableM(m), MV(m, v), Ebinop(v, o, v1, v2), ci_Vval(v1, u1), ci_Voffset(v2, content, t, u2), evalBinopU(o, u1, u2, u), PtrOP(o).
//// 5: store and fetch from heaps (no need to refine field-pt, as it may not points to array contents)
//ci_Voffset(u,content,t,c) :- Pload(p,u), LoadPtr(u,v), ci_pt(v,h), ci_PHoffset(p,h,content,t,c).
//ci_Voffset(u,content,t,c) :- Pload(p,u), LoadPtr(u,v), ci_pt(v,h), ci_gHoffset(h,content,t,c), MP(m,p), NonLocalMH(m,h).
//ci_PHoffset(q,h,content,t,c) :- PPdirect(p,q), ci_postPHoffset(p,h,content,t,c).
//ci_PHoffset(q,h,content,t,c) :- PPtrue(p,q,_), ci_postPHoffset(p,h,content,t,c).
//ci_PHoffset(q,h,content,t,c) :- PPfalse(p,q,_), ci_postPHoffset(p,h,content,t,c).
//
//ci_gHoffset(h,content,t,c) :- Pstore(p,v), StorePtr(u,v), ci_pt(u,h), ci_Voffset(v,content,t,c), MP(m,p), NonLocalMH(m,h).
//ci_postPHoffset(p,h,content,t,c) :- Pstore(p,v), StorePtr(u,v), ci_pt(u,h), ci_Voffset(v,content,t,c), MP(m,p), LocalMH(m,h), P_strong_update(p,h).
//ci_postPHoffset(p,h,content,t,c) :- Pstore(p,v), StorePtr(u,v), ci_pt(u,h), ci_Voffset(v,content,t,c), MP(m,p), LocalMH(m,h), P_weak_update(p,h).
//ci_postPHoffset(p,h,content,t,c) :- Pstore(p,_), ci_PHoffset(p,h,content,t,c), P_weak_update(p,h).
//ci_postPHoffset(p,h,content,t,c) :- Pstore(p,_), ci_PHoffset(p,h,content,t,c), P_no_update(p,h).
//ci_postPHoffset(p,h,content,t,c) :- Peval(p,_,_), ci_PHoffset(p,h,content,t,c).
//ci_postPHoffset(p,h,content,t,c) :- Pload(p,_), ci_PHoffset(p,h,content,t,c).
//ci_postPHoffset(p,h,content,t,c) :- Palloca(p,_), ci_PHoffset(p,h,content,t,c).
//ci_postPHoffset(p,h,content,t,c) :- Pnoop(p), ci_PHoffset(p,h,content,t,c).
//
//ci_Voffset(u,content,t,c) :- ci_IM(i,m), IinvkArg(i,z,v), MmethArg(m,z,u), ci_Voffset(v,content,t,c).
//ci_Voffset(v,content,t,c) :- ci_IM(i,m), IinvkRet(i,v), MmethRet(m,u), ci_Voffset(u,content,t,c).
//// implicit arguments/returns are passed by pointers
//ci_gHoffset(h,content,t,c) :- ci_PHoffset(p,h,content,t,c), Pinvk(p,i), ci_IM(i,m), ci_MH(m,h).
//ci_postPHoffset(p,h,content,t,c) :- ci_gHoffset(h,content,t,c), ci_PHoffset(p,h,_,_,_), Pinvk(p,i), ci_IM(i,m), ci_MH(m,h).
//ci_postPHoffset(p,h,content,t,c) :- ci_PHoffset(p,h,content,t,c), Pinvk(p,i), ci_IM(i,m), ci_non_MH(m,h).
////ci_postPHoffset(p,h,content,t,c) :- Pinvk(p,i), ci_PHoffset(p,h,content,t,c), ci_IM(i,m), ExtMeth(m). // treat all external methods as pure, i.e. no heaps are touched
