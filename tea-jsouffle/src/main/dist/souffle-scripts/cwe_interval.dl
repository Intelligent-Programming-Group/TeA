.type M <: unsigned
.type P <: unsigned
.type V <: unsigned
.type T <: unsigned
.type Z <: unsigned
.type C <: unsigned
.type U <: unsigned
.type A <: unsigned
.type R <: unsigned
.type G <: unsigned

.decl ci_IM(i:P, m:M)
.input ci_IM
.decl IinvkArg(p:P, i:Z, v:V)
.input IinvkArg
.decl MmethArg(m:M, i:Z, v:V)
.input MmethArg
.decl IinvkRet(p:P, v:V)
.input IinvkRet
.decl MmethRet(m:M, v:V)
.input MmethRet

.decl region_contain(r:R, a:A)
.input region_contain
.decl memuse(p:P, r:R, g:G)
.input memuse
.decl memdef(p:P, r:R, g1:G, g0:G)
.input memdef
.decl memassign(r:R, g1:G, g0:G)
.input memassign
.decl mementry(m:M, r:R)
.input mementry
.decl initgen(g:G)
.input initgen
.decl MPexit(m:M, p:P)
.input MPexit

.decl refine_copy(p:P, to:A, from:A)
.input refine_copy

.decl Peval(p:P, res:V)
.input Peval

.decl variable_const_int(v:V, c:C)
.input variable_const_int
.decl operation_unary_fneg(e:V, v:V)
.input operation_unary_fneg
.decl  operation_binary_add(e:V,  v1:V, v2:V)
.input operation_binary_add
.decl  operation_binary_fadd(e:V, v1:V, v2:V)
.input operation_binary_fadd
.decl  operation_binary_sub(r:V, v1:V, v2:V)
.input operation_binary_sub
.decl  operation_binary_fsub(r:V, v1:V, v2:V)
.input operation_binary_fsub
.decl  operation_binary_mul(r:V, v1:V, v2:V)
.input operation_binary_mul
.decl  operation_binary_fmul(r:V, v1:V, v2:V)
.input operation_binary_fmul
.decl  operation_binary_udiv(r:V, v1:V, v2:V)
.input operation_binary_udiv
.decl  operation_binary_sdiv(r:V, v1:V, v2:V)
.input operation_binary_sdiv
.decl  operation_binary_fdiv(r:V, v1:V, v2:V)
.input operation_binary_fdiv
.decl  operation_binary_urem(r:V, v1:V, v2:V)
.input operation_binary_urem
.decl  operation_binary_srem(r:V, v1:V, v2:V)
.input operation_binary_srem
.decl  operation_binary_frem(r:V, v1:V, v2:V)
.input operation_binary_frem
.decl  operation_binary_shl(r:V, v1:V, v2:V)
.input operation_binary_shl
.decl  operation_binary_lshr(r:V, v1:V, v2:V)
.input operation_binary_lshr
.decl  operation_binary_ashr(r:V, v1:V, v2:V)
.input operation_binary_ashr
.decl  operation_binary_and(r:V, v1:V, v2:V)
.input operation_binary_and
.decl  operation_binary_or(r:V, v1:V, v2:V)
.input operation_binary_or
.decl  operation_binary_xor(r:V, v1:V, v2:V)
.input operation_binary_xor
.decl  operation_cast_trunc( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_trunc
.decl  operation_cast_zext( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_zext
.decl  operation_cast_sext( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_sext
.decl  operation_cast_fptoui( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_fptoui
.decl  operation_cast_fptosi( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_fptosi
.decl  operation_cast_uitofp( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_uitofp
.decl  operation_cast_sitofp( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_sitofp
.decl  operation_cast_fptrunc( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_fptrunc
.decl  operation_cast_fpext( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_fpext
.decl  operation_cast_ptrtoint( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_ptrtoint
.decl  operation_cast_inttoptr( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_inttoptr
.decl  operation_cast_bitcast( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_bitcast
.decl  operation_cast_addrspacecast( res:V, src:V, fromty:T, toty:T ) //  ""
.input operation_cast_addrspacecast

.decl ConstU(c:C, u:U)
.input ConstU
.decl evalAddU(o1:U,o2:U,res:U)
.input evalAddU
.decl evalSubU(o1:U,o2:U,res:U)
.input evalSubU
.decl evalMulU(o1:U,o2:U,res:U)
.input evalMulU
.decl evalAndU(o1:U,o2:U,res:U)
.input evalAndU
.decl evalOrU(o1:U,o2:U,res:U)
.input evalOrU
.decl evalXorU(o1:U,o2:U,res:U)
.input evalXorU
.decl evalEQU(o1:U, o2:U)
.input evalEQU
.decl evalNEU(o1:U, o2:U)
.input evalNEU
.decl evalLTU(o1:U, o2:U)
.input evalLTU
.decl evalLEU(o1:U, o2:U)
.input evalLEU
.decl Uempty(c:U)
.input Uempty
.decl Uzero(c:U)
.input Uzero
.decl Uone(c:U)
.input Uone
.decl Unonzero(c:U)
.input Unonzero
.decl Uunknown(c:U)
.input Uunknown
.decl Uinput(u:U)
.input Uinput

.decl instruction_store_var(p:P, v:V)
.input instruction_store_var
.decl instruction_store_addr(p:P, v:V)
.input instruction_store_addr
.decl instruction_load_res(p:P, v:V)
.input instruction_load_res
.decl instruction_load_ptr(p:P, v:V)
.input instruction_load_ptr

.decl variable_global_type(v:V, t:T)
.input variable_global_type
.decl instruction_alloca_type(p:P, t:T)
.input instruction_alloca_type
.decl instruction_alloca_res(p:P, v:V)
.input instruction_alloca_res
.decl instruction_alloca_size(p:P, v:V)
.input instruction_alloca_size

.decl mallocFunc(m:M)
.input mallocFunc
.decl allocaFunc(m:M)
.input allocaFunc
.decl reallocFunc(m:M)
.input reallocFunc
.decl callocFunc(m:M)
.input callocFunc

.decl operation_gep_base(res:V, base:V)
.input operation_gep_base
.decl operation_gep_type(res:V, ty:T)
.input operation_gep_type
.decl operation_gep_nindices(res:V, n:Z)
.input operation_gep_nindices
.decl operation_gep_index_field(res:V, i:Z, f:Z)
.input operation_gep_index_field
.decl operation_gep_index_offset(res:V, i:Z, off:V)
.input operation_gep_index_offset
.decl variable_type(v:V, t:T)
.input variable_type
.decl integer_type(t:T)
.input integer_type
.decl pointer_type(t:T)
.input pointer_type
.decl struct_type(t:T)
.input struct_type
.decl struct_type_field(t:T, f:Z, fty:T)
.input struct_type_field
.decl array_type_component(t:T, sub:T)
.input array_type_component

.decl type_width(t:T, w:C)
.input type_width

.decl memsetFunc(m:M)
.input memsetFunc
.decl memcpyFunc(m:M)
.input memcpyFunc
.decl memmoveFunc(m:M)
.input memmoveFunc

.decl Z0(i:Z)
.input Z0
.decl Z1(i:Z)
.input Z1
.decl Z2(i:Z)
.input Z2
.decl Znext(i1:Z, i2:Z)
.input Znext

.decl argInput(m:M, i:Z)
.input argInput
.decl retInput(m:M)
.input retInput

.decl ci_Vval(v:V, u:U)
.output ci_Vval
.decl ci_Pval(r:R, g:G, u:U)
// .output ci_Pval
.decl ci_Voffset(v:V, off:U, lim:U)
.output ci_Voffset
.decl ci_Poffset(r:R, g:G, off:U, lim:U)
// .output ci_Poffset

.decl CWE369_divide_by_zero(p:P, v:V)
.output CWE369_divide_by_zero

.decl CWE121_buffer_overflow(p:P, v:V)
.output CWE121_buffer_overflow

.decl interproc_var_assign(u:V, v:V)
interproc_var_assign(u, v) :- ci_IM(i,m), IinvkArg(i,z,v), MmethArg(m,z,u).
interproc_var_assign(v, u) :- ci_IM(i,m), IinvkRet(i,v), MmethRet(m,u).
.decl interproc_mem_assign(r1:R, g1:G, r0:R, g0:G)
interproc_mem_assign(r1, g1, r0, g0) :- ci_IM(i,m), memuse(i, r0, g0), mementry(m, r1), region_contain(r0, o), region_contain(r1, o), initgen(g1).
interproc_mem_assign(r1, g1, r0, g0) :- ci_IM(i,m), memdef(i, r1, g1, _), MPexit(m, p), memuse(p, r0, g0), region_contain(r1, o), region_contain(r0, o).
// special handling for memcpy / memmove
.decl region_copy(r1:R, g1:G, r0:R, g0:G)
region_copy(r1, g1, r0, g0) :- refine_copy(p, a1, a0), region_contain(r1, a1), region_contain(r0, a0), memdef(p, r1, g1, _), memuse(p, r0, g0).
// TODO: special handling for memset ?

ci_Vval(v,u) :- variable_const_int(v, c), ConstU(c, u).
ci_Vval(v,u) :- operation_unary_fneg(v, v0), ci_Vval(v0, u0), Uzero(uzero), evalSubU(uzero, u0, u).
ci_Vval(v,u) :- operation_binary_add(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, u2), evalAddU(u1, u2, u).
ci_Vval(v,u) :- operation_binary_sub(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, u2), evalSubU(u1, u2, u).
ci_Vval(v,u) :- operation_binary_mul(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, u2), evalMulU(u1, u2, u).
ci_Vval(v,u) :- operation_binary_udiv(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, _), Uunknown(u).
ci_Vval(v,u) :- operation_binary_sdiv(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, _), Uunknown(u).
ci_Vval(v,u) :- operation_binary_urem(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, u2), Uzero(uzero), evalLEU(uzero, u), evalLTU(u, u2).
ci_Vval(v,u) :- operation_binary_srem(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, u2), Uzero(uzero), evalLEU(uzero, u), evalLTU(u, u2).
ci_Vval(v,u) :- operation_binary_shl(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, _), evalLEU(u1, u).
ci_Vval(v,u) :- operation_binary_lshr(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, _), Uzero(uzero), evalLEU(uzero, u), evalLTU(u, u1).
ci_Vval(v,u) :- operation_binary_ashr(v, v1, v2), ci_Vval(v1, u1), ci_Vval(v2, _), Uzero(uzero), evalLEU(uzero, u), evalLTU(u, u1).
ci_Vval(v,u) :- operation_binary_and(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, _), Uunknown(u).
ci_Vval(v,u) :- operation_binary_or(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, _), Uunknown(u).
ci_Vval(v,u) :- operation_binary_xor(v, v1, v2), ci_Vval(v1, _), ci_Vval(v2, _), Uunknown(u).


ci_Vval(v,u) :- operation_cast_trunc(v, v0, _, _), ci_Vval(v0, u).
ci_Vval(v,u) :- operation_cast_zext(v, v0, _, _), ci_Vval(v0, u).
ci_Vval(v,u) :- operation_cast_sext(v, v0, _, _), ci_Vval(v0, u).
ci_Vval(v,u) :- operation_cast_fptoui(v, _, _, _), Uunknown(u).
ci_Vval(v,u) :- operation_cast_fptosi(v, _, _, _), Uunknown(u).
ci_Vval(v,u) :- operation_cast_ptrtoint(v, _, _, _), Uunknown(u).
ci_Vval(v,u) :- operation_cast_bitcast(v, _, _, _), Uunknown(u).

ci_Vval(u,c) :- instruction_load_res(p, u), variable_type(u, t), integer_type(t), memuse(p, r, g), ci_Pval(r,g,c).

ci_Vval(u,c) :- interproc_var_assign(u, v), ci_Vval(v,c).

ci_Pval(r, g1, c) :- ci_Pval(r, g0, c), memassign(r, g1, g0).
ci_Pval(r, g1, c) :- ci_Pval(r, g0, c), memdef(_, r, g1, g0).
ci_Pval(r, g1, c) :- ci_Vval(v, c), instruction_store_var(p, v), memdef(p, r, g1, _).

ci_Pval(r1, g1, c) :- ci_Pval(r0, g0, c), interproc_mem_assign(r1, g1, r0, g0).

ci_Pval(r1,g1,c) :- region_copy(r1,g1,r0,g0), ci_Pval(r0,g0,c).

// input values
ci_Vval(v,c) :- ci_IM(p, m), retInput(m), IinvkRet(p, v), variable_type(v, t), integer_type(t), Uinput(c).
ci_Pval(r,g1,c) :- ci_IM(p, m), retInput(m), memdef(p, r, g1, _), Uinput(c).
ci_Pval(r,g1,c) :- ci_IM(p, m), argInput(m, _), memdef(p, r, g1, _), Uinput(c).

CWE369_divide_by_zero(p, d) :- Peval(p, res), operation_binary_udiv(res, _, d), ci_Vval(d, u), Uzero(uzero), evalEQU(u, uzero).
CWE369_divide_by_zero(p, d) :- Peval(p, res), operation_binary_sdiv(res, _, d), ci_Vval(d, u), Uzero(uzero), evalEQU(u, uzero).
CWE369_divide_by_zero(p, d) :- Peval(p, res), operation_binary_urem(res, _, d), ci_Vval(d, u), Uzero(uzero), evalEQU(u, uzero).
CWE369_divide_by_zero(p, d) :- Peval(p, res), operation_binary_srem(res, _, d), ci_Vval(d, u), Uzero(uzero), evalEQU(u, uzero).

.decl typeWidthU(t:T, u:U)
typeWidthU(t, u) :- type_width(t, c), ConstU(c, u).

ci_Voffset(v,off0,lim) :- variable_global_type(v,t), typeWidthU(t,lim), Uzero(off0).
ci_Voffset(v,off0,lim) :- instruction_alloca_size(p, vnum), ci_Vval(vnum, unum), instruction_alloca_type(p, t), typeWidthU(t, uw), evalMulU(unum, uw, lim), instruction_alloca_res(p,v), Uzero(off0).
ci_Voffset(v,off0,bytes) :- ci_IM(p, m), mallocFunc(m), Z0(i0), IinvkArg(p, i0, size), ci_Vval(size, bytes), IinvkRet(p, v), Uzero(off0).
ci_Voffset(v,off0,bytes) :- ci_IM(p, m), allocaFunc(m), Z0(i0), IinvkArg(p, i0, size), ci_Vval(size, bytes), IinvkRet(p, v), Uzero(off0).
ci_Voffset(v,off0,bytes) :- ci_IM(p, m), reallocFunc(m), Z1(i1), IinvkArg(p, i1, size), ci_Vval(size, bytes), IinvkRet(p, v), Uzero(off0).
ci_Voffset(v,off0,bytes) :- ci_IM(p, m), callocFunc(m), Z0(i0), Z1(i1), IinvkArg(p, i0, vnum), IinvkArg(p, i1, vw), ci_Vval(vnum, unum), ci_Vval(vw, uw), evalMulU(unum, uw, bytes), IinvkRet(p, v), Uzero(off0).

.decl ci_gep_offset(v:V, i:Z, off:U, lim:U, ty:T)
.output ci_gep_offset

ci_gep_offset(v,i1,off1,lim,ty) :- ci_Voffset(base,off0,lim), operation_gep_base(v, base), Z0(i0), operation_gep_index_offset(v,i0,voff), ci_Vval(voff,uoff), operation_gep_type(v, ty), typeWidthU(ty, uw), evalMulU(uoff,uw,du), evalAddU(off0,du,off1),Z1(i1).
// pointer to array element can step over the whole array
ci_gep_offset(v,i1,off1,sublim,subty) :- ci_gep_offset(v,i0,_,_,ty), operation_gep_index_offset(v,i0,voff), ci_Vval(voff, uoff), array_type_component(ty,subty), typeWidthU(subty,uw), evalMulU(uoff,uw,off1), typeWidthU(ty, sublim), Znext(i0,i1).
// pointer to struct filed can only go beyond the field
ci_gep_offset(v,i1,off0,flim,fty) :- ci_gep_offset(v,i0,_,_,ty), operation_gep_index_field(v,i0,f), struct_type_field(ty,f,fty), typeWidthU(fty, flim), Uzero(off0),Znext(i0,i1).
ci_Voffset(v,off,lim) :- ci_gep_offset(v,n,off,lim,_), operation_gep_nindices(v,n).

//.output ci_gep_offset // for debug

ci_Voffset(u,off,lim) :- instruction_load_res(p, u), variable_type(u, t), pointer_type(t), memuse(p, r, g), ci_Poffset(r,g,off,lim).

ci_Voffset(u,off,lim) :- interproc_var_assign(u, v), ci_Voffset(v,off,lim).

ci_Poffset(r, g1, off, lim) :- ci_Poffset(r, g0, off, lim), memassign(r, g1, g0).
ci_Poffset(r, g1, off, lim) :- ci_Poffset(r, g0, off, lim), memdef(_, r, g1, g0).
ci_Poffset(r, g1, off, lim) :- ci_Voffset(v, off, lim), instruction_store_var(p, v), memdef(p, r, g1, _).

ci_Poffset(r1, g1, off, lim) :- ci_Poffset(r0, g0, off, lim), interproc_mem_assign(r1, g1, r0, g0).

ci_Poffset(r1, g1, off, lim) :- region_copy(r1,g1,r0,g0), ci_Poffset(r0,g0,off,lim).

.decl read_bytes(p:P, l:U)
.decl write_bytes(p:P, l:U)
.decl inst_read(p:P, v:V)
.decl inst_write(p:P, v:V)

read_bytes(p, l) :- instruction_load_res(p, u), variable_type(u, t), typeWidthU(t, l).
write_bytes(p, l) :- instruction_store_var(p, u), variable_type(u, t), typeWidthU(t, l).

write_bytes(p, l) :- ci_IM(p, m), memsetFunc(m), Z2(i2), IinvkArg(p, i2, vlen), ci_Vval(vlen, l).
read_bytes(p, l), read_bytes(p, l) :- ci_IM(p, m), memcpyFunc(m), Z2(i2), IinvkArg(p, i2, vlen), ci_Vval(vlen, l).
read_bytes(p, l), read_bytes(p, l) :- ci_IM(p, m), memmoveFunc(m), Z2(i2), IinvkArg(p, i2, vlen), ci_Vval(vlen, l).

inst_read(p, v) :- instruction_load_ptr(p, v).
inst_write(p, v) :- instruction_store_addr(p, v).

inst_write(p, v) :- ci_IM(p, m), memsetFunc(m), Z0(i0), IinvkArg(p, i0, v).
inst_write(p, v) :- ci_IM(p, m), memcpyFunc(m), Z0(i0), IinvkArg(p, i0, v).
inst_read(p, v) :- ci_IM(p, m), memcpyFunc(m), Z1(i1), IinvkArg(p, i1, v).
inst_write(p, v) :- ci_IM(p, m), memmoveFunc(m), Z0(i0), IinvkArg(p, i0, v).
inst_read(p, v) :- ci_IM(p, m), memmoveFunc(m), Z1(i1), IinvkArg(p, i1, v).

CWE121_buffer_overflow(p, v) :- ci_Voffset(v, off, lim), inst_read(p, v), read_bytes(p, du), evalAddU(off, du, end), evalLTU(lim, end).
CWE121_buffer_overflow(p, v) :- ci_Voffset(v, off, lim), inst_write(p, v), write_bytes(p, du), evalAddU(off, du, end), evalLTU(lim, end).