.type M <: unsigned
.type P <: unsigned
.type V <: unsigned
.type C <: unsigned
.type Z <: unsigned
.type A <: unsigned

.decl ci_IM(i:P, m:M)
.input ci_IM

.decl MP(m:M, p:P)
.input MP
.decl PP(p:P, q:P)
.input PP
.decl MV(m:M, v:V)
.input MV
.decl refine_pt(i:V, h:A)
.input refine_pt
.decl refine_hpt(h:A, o:A)
.input refine_hpt
.decl APfield(a:A, f:Z, fld:A)
.input APfield

.decl variable_global(v:V)
.input variable_global

.decl instruction_load_ptr(p:P, ptr:V)
.input instruction_load_ptr
.decl instruction_store_addr(p:P, addr:V)
.input instruction_store_addr

.decl Peval(p:P,v:V)
.input Peval
.decl Palloca(p:P,v:V)
.input Palloca
.decl Pstore(p:P,v:V)
.input Pstore
.decl Pload(p:P,v:V)
.input Pload
.decl Pinvk(p:P)
.input Pinvk
.decl Passign(p:P,v:V)
.input Passign
.decl Pnoop(p:P)
.input Pnoop

.decl ExtMeth(m:M)
.input ExtMeth
.decl argInput(m:M, i:Z)
.input argInput
.decl retInput(m:M)
.input retInput
.decl IinvkArg(p:P, i:Z, v:V)
.input IinvkArg
.decl IinvkRet(p:P, v:V)
.input IinvkRet
.decl MmethArg(m:M, i:Z, v:V)
.input MmethArg
.decl instruction_ret_var(p:P, v:V)
.input instruction_ret_var

.decl MPentry(m:M, p:P)
.input MPentry
.decl MPexit(m:M, p:P)
.input MPexit

.decl load_may_use(p:P, h:A)
.output load_may_use
.decl store_may_def(p:P, h:A)
.output store_may_def
.decl invk_may_use(p:P, h:A)
.output invk_may_use
.decl invk_may_def(p:P, h:A)
.output invk_may_def

.decl ret_may_use(p:P, h:A)
.output ret_may_use

.decl var_reachable(v:V, h:A)
.output var_reachable

.decl M_may_def(m:M, h:A)
.output M_may_def
.decl M_may_use(m:M, h:A)
.output M_may_use
.decl DUedge(from:P, to:P) // Note: reachable relations among all defs and uses, no aliasing considered
.output DUedge

.decl memcpyFunc(m:M) // special handling for memcpy / memset like functions
.input memcpyFunc
.decl memmoveFunc(m:M)
.input memmoveFunc
.decl memsetFunc(m:M)
.input memsetFunc
.decl Z0(i0:Z)
.input Z0

var_reachable(v, h) :- refine_pt(v, h).
var_reachable(v, o) :- var_reachable(v, h), refine_hpt(h, o).
var_reachable(v, fld) :- var_reachable(v, a), APfield(a, _, fld).

.decl global_reachable(h:A)
.output global_reachable
global_reachable(h) :- variable_global(v), var_reachable(v, h).

.decl local_reachable(m:M, h:A)
.output local_reachable
local_reachable(m, h) :- MV(m, v), var_reachable(v, h).

.decl global_obj(v:V, h:A)
.output global_obj
global_obj(v, h) :- variable_global(v), refine_pt(v, h).

.decl local_obj(m:M, v:V, h:A)
.output local_obj
local_obj(m, v, h) :- MV(m, v), refine_pt(v, h).

.decl live_on_entry(m:M, h:A)
.output live_on_entry
live_on_entry(m, h) :- MmethArg(m, _, v), var_reachable(v, h).

M_may_def(m, h), M_may_use(m, h) :- store_may_def(p, h), MP(m, p).
M_may_use(m, h) :- load_may_use(p, h), MP(m, p).
M_may_def(m, h), M_may_use(m, h) :- invk_may_def(p, h), MP(m, p).
M_may_use(m, h) :- invk_may_use(p, h), MP(m, p).

store_may_def(p, h) :- instruction_store_addr(p, v), refine_pt(v, h).
load_may_use(p, h) :- instruction_load_ptr(p, v), refine_pt(v, h).

.decl iret_access(p:P, h:A)
.decl iarg_access(p:P, i:Z, h:A)
iret_access(p, h) :- IinvkRet(p, v), var_reachable(v, h).
iarg_access(p, i, h) :- IinvkArg(p, i, v), var_reachable(v, h).
// Note: global objects are implicitely returned
invk_may_use(p, h) :- M_may_use(callee, h), ci_IM(p, callee), global_reachable(h).
invk_may_def(p, h) :- M_may_def(callee, h), ci_IM(p, callee), global_reachable(h).
invk_may_use(p, h) :- M_may_use(callee, h), ci_IM(p, callee), iret_access(p, h).
invk_may_def(p, h) :- M_may_def(callee, h), ci_IM(p, callee), iret_access(p, h).
invk_may_use(p, h) :- M_may_use(callee, h), ci_IM(p, callee), iarg_access(p, _, h).
invk_may_def(p, h) :- M_may_def(callee, h), ci_IM(p, callee), iarg_access(p, _, h).

invk_may_use(p,h) :- iret_access(p, h), ci_IM(p, callee), ExtMeth(callee).
invk_may_def(p,h) :- iret_access(p, h), ci_IM(p, callee), retInput(callee).
invk_may_use(p,h) :- iarg_access(p, _, h), ci_IM(p, callee), ExtMeth(callee).
invk_may_def(p,h) :- iarg_access(p, i, h), ci_IM(p, callee), argInput(callee, i).

.decl mem_modify(p:P, h:A) 
mem_modify(p,h) :- ci_IM(p, callee), memsetFunc(callee), Z0(i), IinvkArg(p, i, v), refine_pt(v, h).
mem_modify(p,h) :- ci_IM(p, callee), memcpyFunc(callee), Z0(i), IinvkArg(p, i, v), refine_pt(v, h).
mem_modify(p,h) :- ci_IM(p, callee), memmoveFunc(callee), Z0(i), IinvkArg(p, i, v), refine_pt(v, h).
mem_modify(p,fld) :- mem_modify(p,a), APfield(a, _, fld).
invk_may_def(p,h) :- mem_modify(p, h).

// Note: updated global objects / pass-by-pointer arguments may be used later in callers
ret_may_use(p,h) :- M_may_def(m, h), global_reachable(h), MPexit(m, p).
ret_may_use(p,h) :- M_may_def(m, h), MmethArg(m, _, v), var_reachable(v, h), MPexit(m, p).
ret_may_use(p,h) :- M_may_def(m, h), MPexit(m, p), instruction_ret_var(p, v), var_reachable(v, h).

// .decl def_track(def:P, to:P)
// def_track(def, to) :- Pstore(def, _), PP(def, to).
// def_track(def, to) :- Pinvk(def), PP(def, to).
// def_track(def, next) :- def_track(def, to), Peval(to, _), PP(to, next).
// def_track(def, next) :- def_track(def, to), Pnoop(to), PP(to, next).
// def_track(def, next) :- def_track(def, to), Palloca(to, _), PP(to, next).
// def_track(def, next) :- def_track(def, to), Passign(to, _), PP(to, next).
// def_def_edge(def, to) :- def_track(def, to), Pstore(to, _).
// def_use_edge(def, to) :- def_track(def, to), Pload(to, _).
// def_def_edge(def, to), def_use_edge(def, to) :- def_track(def, to), Pinvk(to).
// .decl use_track(def:P, to:P)
// use_track(use, to) :- Pload(use, _), PP(use, to).
// use_track(use, to) :- Pinvk(use), PP(use, to).
// use_track(use, next) :- use_track(use, to), Peval(to, _), PP(to, next).
// use_track(use, next) :- use_track(use, to), Pnoop(to), PP(to, next).
// use_track(use, next) :- use_track(use, to), Palloca(to, _), PP(to, next).
// use_track(use, next) :- use_track(use, to), Passign(to, _), PP(to, next).
// use_def_edge(use, to) :- use_track(use, to), Pstore(to, _).
// use_use_edge(use, to) :- use_track(use, to), Pload(to, _).
// use_def_edge(use, to), use_use_edge(use, to) :- use_track(use, to), Pinvk(to).
.decl DUtrack(from:P, to:P)
DUtrack(entry, to) :- MPentry(_, entry), PP(entry, to).
DUtrack(def, to) :- Pstore(def, _), PP(def, to).
DUtrack(use, to) :- Pload(use, _), PP(use, to).
DUtrack(invk, to) :- Pinvk(invk), PP(invk, to).
DUtrack(from, next) :- DUtrack(from, to), Peval(to, _), PP(to, next).
DUtrack(from, next) :- DUtrack(from, to), Pnoop(to), PP(to, next).
DUtrack(from, next) :- DUtrack(from, to), Palloca(to, _), PP(to, next).
DUtrack(from, next) :- DUtrack(from, to), Passign(to, _), PP(to, next).
DUedge(from, to) :- DUtrack(from, to), Pstore(to, _).
DUedge(from, to) :- DUtrack(from, to), Pload(to, _).
DUedge(from, to) :- DUtrack(from, to), Pinvk(to).

DUedge(from, to) :- DUtrack(from, to), MPexit(_, to).